type: edu
files:
  - name: browser.py
    visible: true
    text: "\nnytimes_com = '''\nThis New Liquid Is Magnetic, and Mesmerizing\n\nScientists\
    \ have created \"soft\" magnets that can flow \nand change shape, and that could\
    \ be a boon to medicine \nand robotics. (Source: New York Times)\n\n\nMost Wikipedia\
    \ Profiles Are of Men. This Scientist Is Changing That.\n\nJessica Wade has added\
    \ nearly 700 Wikipedia biographies for\n important female and minority scientists\
    \ in less than two \n years.\n\n'''\n\nbloomberg_com = '''\nThe Space Race: From\
    \ Apollo 11 to Elon Musk\n\nIt's 50 years since the world was gripped by historic\
    \ images\n of Apollo 11, and Neil Armstrong -- the first man to walk \n on the\
    \ moon. It was the height of the Cold War, and the charts\n were filled with David\
    \ Bowie's Space Oddity, and Creedence's \n Bad Moon Rising. The world is a very\
    \ different place than \n it was 5 decades ago. But how has the space race changed\
    \ since\n the summer of '69? (Source: Bloomberg)\n\n\nTwitter CEO Jack Dorsey\
    \ Gives Talk at Apple Headquarters\n\nTwitter and Square Chief Executive Officer\
    \ Jack Dorsey \n addressed Apple Inc. employees at the iPhone makerâ€™s headquarters\n\
    \ Tuesday, a signal of the strong ties between the Silicon Valley giants.\n'''\n\
    \n# write your code here\n"
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      from hstest.stage_test import *
      import requests
      import os
      import shutil
      from bs4 import BeautifulSoup
      import sys
      
      if sys.platform.startswith("win"):
          import _locale
          # pylint: disable=protected-access
          _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])
      
      CheckResult.correct = lambda: CheckResult(True, '')
      CheckResult.wrong = lambda feedback: CheckResult(False, feedback)
      
      
      class TextBasedBrowserTest(StageTest):
      
          def generate(self):
      
              dir_for_files = os.path.join(os.curdir, 'tb_tabs')
              return [
                  TestCase(
                      stdin='docs.python.org\nexit',
                      attach='docs.python.org',
                      args=[dir_for_files]
                  ),
                  TestCase(
                      stdin='nytimescom\nexit',
                      attach=None,
                      args=[dir_for_files]
                  ),
                  TestCase(
                      stdin='back\nexit',
                      attach='back',
                      args=['tb_tabs']
                  ),
                  TestCase(
                      stdin='peps.python.org/pep-0008/\ndocs.python.org\npeps\nexit',
                      attach=('peps.python.org/pep-0008/', 'docs.python.org', 'peps.python.org/pep-0008/'),
                      args=[dir_for_files]
                  ),
                  TestCase(
                      stdin='peps.python.org/pep-0008/\ndocs.python.org\nback\nexit',
                      attach=('peps.python.org/pep-0008/', 'docs.python.org', 'docs.python.org'),
                      args=['tb_tabs']
                  )
              ]
      
          def check_output(self, output_text: str, ideal_text: list, page_code: list, source: str):
              """
              :param output_text: the text from the user's file or from the console output
              :param ideal_text: the text from the web page (without HTML tags)
              :param page_code: the text from the web page with HTML tags
              :param source: the name of the file from which the user's text is taken or "console output" line
              :return: raises WrongAnswer if an HTML tag is found in the output_text
              or if a word from the ideal_text is not found in the output_text
              """
              for line in page_code:
                  if line not in ideal_text and line in output_text:
                      raise WrongAnswer(f"The following token is present in the {source} even though it's not expected "
                                        f"to be there:\n\'{line}\'\n"
                                        f"Make sure you get rid of all HTML tags.")
              output_text = ''.join(char for char in output_text if char.isalnum())
              for line in ideal_text:
                  line_without_spaces = ''.join(char for char in line if char.isalnum())
                  if line_without_spaces.strip() not in output_text:
                      raise WrongAnswer(f"The following token is missing from the {source}:\n"
                                        f"\'{line}\'\n"
                                        f"Make sure you get all the text from the web page.")
      
          def _check_files(self, path_for_tabs: str, ideal_page: list, page_code: list, attach: str):
              """
              Helper which checks that browser saves visited url in files and
              provides access to them.
      
              :param path_for_tabs: directory which must contain saved tabs
              :param ideal_page: the text from the web page (without HTML tags)
              :param page_code: the text from the web page with HTML tags
              """
      
              path, dirs, filenames = next(os.walk(path_for_tabs))
      
              name = attach.split('.')[0]
              if name in filenames:
                  print("found file: {}".format(name))
                  with open(os.path.join(path_for_tabs, name), 'r', encoding='utf-8') as tab:
                      try:
                          content = tab.read()
                      except UnicodeDecodeError:
                          raise WrongAnswer('An error occurred while reading your saved tab. '
                                            'Perhaps you used the wrong encoding?')
                      self.check_output(content, ideal_page, page_code, "file " + name)
      
              else:
                  raise WrongAnswer(f"Couldn't find file with the name {name}.\n"
                                    f"Make sure you saved the tab and named it correctly.")
      
          @staticmethod
          def get_page_and_code(url):
              """
              :param url: url link that the program is requested to open
              :return: list with strings of clean text and list of strings with text with HTML tags
              """
      
              url = f'https://{url}'
              user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) " \
                           "Chrome/70.0.3538.77 Safari/537.36"
              try:
                  page = requests.get(url, headers={'User-Agent': user_agent})
              except requests.exceptions.ConnectionError:
                  raise WrongAnswer(f"An error occurred while tests tried to connect to the page {url}.\n"
                                    f"Please try again a bit later.")
              soup = BeautifulSoup(page.content, 'html.parser')
              tags = soup.find_all(['p', 'a', 'h1', 'h2', 'ul', 'ol', 'li'])
              text = []
              tagged_text = []
              for tag in tags:
                  tag_text = tag.text.strip()
                  if tag_text:
                      text.append(tag_text)
                  tag = str(tag)
                  if tag.startswith('<'):
                      tagged_text.append(tag)
              return text, tagged_text
      
          def check_correct_url(self, attach_0: str, path_for_tabs: str, reply):
      
              ideal_text, page_code = TextBasedBrowserTest.get_page_and_code(attach_0)
              self._check_files(path_for_tabs, ideal_text, page_code, attach_0)
              self.check_output(reply, ideal_text, page_code, "console output")
      
          def check(self, reply, attach):
      
              # Incorrect URL
              if attach is None:
                  if 'invalid url' in reply.lower():
                      return CheckResult.correct()
                  else:
                      return CheckResult.wrong('An invalid URL was input to your program.\n'
                                               'Your program should print \'Invalid URL\'.')
      
              if attach == 'back':
                  if not reply:
                      return CheckResult.correct()
                  else:
                      return CheckResult.wrong(f'There should be no output. But your program printed: {reply}')
      
              # Correct URL
              path_for_tabs = os.path.join(os.curdir, 'tb_tabs')
      
              if not os.path.isdir(path_for_tabs):
                  return CheckResult.wrong("There is no directory for tabs")
      
              if isinstance(attach, tuple):
                  for element in attach:
                      attach_0 = element
                      self.check_correct_url(attach_0, path_for_tabs, reply)
      
              elif isinstance(attach, str):
                  attach_0 = attach
                  self.check_correct_url(attach_0, path_for_tabs, reply)
      
              try:
                  shutil.rmtree(path_for_tabs)
              except PermissionError:
                  return CheckResult.wrong("Impossible to remove the directory for tabs. "
                                           "Perhaps you haven't closed some file?")
      
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          TextBasedBrowserTest().run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import TextBasedBrowserTest
      
      if __name__ == '__main__':    TextBasedBrowserTest().run_tests()
    learner_created: false
  - name: Stage4.md
    visible: true
    text: |
      # Stage 4:
      
      Requirements:
      
      - This stage must actually process the url using the `requests` module;
      
      - Show the whole HTML content processed from the request as plain text;
      
      - Add `https` to the url if it does not have it;
      
      - Previous behaviour continues the same;
    learner_created: true
  - name: startup.py
    visible: true
    text: |
      import os
      
      
      class Arguments:
          """
          Simple class for storing arguments processing rules and values.
          """
          minimum = 2
          local_path = None
      
      
      class Startup:
          """
          Simplest possible interface to handle startup routines.
          Processes the local storage path for later retrieval.
          """
      
          @staticmethod
          def get_path():
              """
              Retrieves the local storage path processed from the
              startup arguments.
              """
              return Arguments.local_path
      
          @staticmethod
          def can_run(arguments):
              """
              Provides startup validation.
              returns True if it can successfully process all startup arguments
              and create the directory for local files, False otherwise.
      
              Once finished, the path can be retrieved from get_path() method.
              """
              if len(arguments) < Arguments.minimum:
                  return False
      
              Arguments.local_path = arguments[1]
      
              if not os.access(Arguments.local_path, os.F_OK):
                  os.makedirs(Arguments.local_path, os.W_OK)
              return os.access(Arguments.local_path, os.W_OK)
    learner_created: true
  - name: storage.py
    visible: true
    text: |
      import os
      
      
      class LocalStorage:
          """
          Handles local storage requirements, storing previously
          navigated web-site content as text accessible from files.
          """
      
          def __init__(self, directory):
              self.directory = directory
      
          def store(self, name, content):
              """
              Stores the given content to a file with the given name
              in the local storage directory.
              """
              with open(self.format_path(name), "w", encoding='utf-8') as tab:
                  tab.write(content)
      
          def load_local(self, name):
              """
              Retrieves the content of a file with the given name
              from the local storage directory.
              """
              with open(self.format_path(name), "r", encoding='utf-8') as tab:
                  return tab.read()
      
          def exists(self, name):
              """
              Validates if a file with the given name exists in the
              local storage directory with reading permissions.
      
              Returns False if the file does not exist or if it cannot
              be read.
              """
              return os.access(self.format_path(name), os.R_OK)
      
          def format_path(self, name):
              """
              Formats the file name into a full file path using the
              local storage directory.
              """
              return os.path.join(self.directory, name)
    learner_created: true
  - name: Stage1.md
    visible: true
    text: |
      # Stage 1:
      
      Focus on stage 1 is just receiving an url as input and returning a text.
      Only two urls will be considered valid.
      If the user types `exit`, finish the program.
      
      ## Valid urls:
      
      - bloomberg.com: should print bloomberg_com variable value;
      
      - nytimes.com: should print nytimes_com variable value.
    learner_created: true
  - name: navigation.py
    visible: true
    text: |
      from collections import deque
      from dataclasses import dataclass
      from storage import LocalStorage
      import re
      import requests
      
      
      @dataclass
      class Page:
          """
          Data class to represent the information of a webpage.
          """
          url: str
          shortcut: str
          content: str
          is_valid: bool
      
      
      class ContentManager:
          """
          Class to provide routines for retrieving and processing
          contents in the form of a Page
          """
          https_pattern = r"https?:\/\/"
          url_pattern = r"(https?:\/\/)?(\w+)\."
          name_pattern = r"(https:\/\/)(\w+)\."
      
          def __init__(self, path):
              self.storage = LocalStorage(path)
      
          def get(self, url) -> Page:
              """
              Gets the content for the given url as a Page.
              Invalid url format will return an error message Page.
              """
              if self.storage.exists(url):
                  return Page("", url, self.storage.load_local(url), True)
      
              if re.match(self.url_pattern, url):
                  name, content = self.process(url)
                  return Page(url, name, content, True)
      
              return Page(url, "", "Invalid URL", False)
      
          def process(self, url):
              """
              Process the content for a previously unknown url.
              It will add the content to the local storage.
              """
              if not re.match(self.https_pattern, url):
                  url = f"https://{url}"
              response = requests.get(url)
              if response:
                  content = response.text
                  name = re.match(self.name_pattern, url).group(2)
                  self.storage.store(name, content)
                  return name, content
              return None, None
      
      
      class Navigation:
          """
          Class to handle navigation history.
          """
      
          def __init__(self):
              self.history = deque()
      
          def add_history(self, command):
              """
              Adds the specified command to the history stack.
              """
              if command:
                  self.history.append(command[:])
      
          def get_previous(self):
              """
              Retrieves the previous state in the history stack,
              removing it from the stack.
              """
              if self.history:
                  return self.history.pop()
              return None
      
      
      class TabsProvider:
          """
          Provides tab-like navigation routines to a text-based browser.
          """
          url_pattern = r"(\w+)\."
      
          def __init__(self, path):
              self.current_page = None
              self.navigation = Navigation()
              self.contents = ContentManager(path)
      
          def navigate(self, command):
              """
              Processes the navigation command.
              When 'back' is used, returns to the previous page.
              Otherwise, shows to content for the command.
              """
              if command == 'back':
                  self.go_back()
                  return
              self.show(command)
      
          def go_back(self):
              """
              Goes back to the previous state if it exists,
              otherwise does nothing.
              """
              if command := self.navigation.get_previous():
                  self.show(command)
      
          def show(self, command):
              """
              Prints the page content based on a command or url.
              If the page is valid, adds it to history for future
              backwards navigation.
              """
              page = self.contents.get(command)
              print(page.content)
              if page.is_valid:
                  self.navigation.add_history(self.current_page)
                  self.current_page = page.shortcut
    learner_created: true
  - name: Stage2.md
    visible: true
    text: |
      # Stage 2:
      
      Requirements:
      
      - Accept 1 directory name as argument;
      
      - Once url has been accessed, save it to file in the directory;
      
      - When receiving a shortened request, the program should retrieve information from the file if it is available;
      
      - The stage describes some error messages that must be shown for invalid inputs;
      
      - Previous behaviour for exiting continues to exist;
    learner_created: true
  - name: Stage3.md
    visible: true
    text: |
      # Stage 3:
      
      Requirements:
      
      - Implement a navigation system with the usage of the `back` command;
      
      - Navigation should use a `stack`;
      
      - Current page should not be present in the stack;
      
      - Previous behaviour continues the same;
    learner_created: true
  - name: Stage5.md
    visible: true
    learner_created: true
  - name: content.py
    visible: true
    learner_created: true
  - name: localStorage/docs
    visible: true
    learner_created: true
  - name: localStorage/nytimes
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/7214#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 30 Nov 2023 00:15:16 UTC"
record: -1
